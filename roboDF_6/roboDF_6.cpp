#pragma config(Sensor, S1, ll, sensorAnalogActive)
#pragma config(Sensor, S2, mux, sensorI2CCustom)
#pragma config(Sensor, S3, rr, sensorAnalogActive)
#pragma config(Sensor, S4, ARDUINO, sensorI2CCustom)
#pragma config(Motor, motorA, l, tmotorNXT, PIDControl, reversed, encoder)
#pragma config(Motor, motorC, r, tmotorNXT, PIDControl, reversed, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//#include "../VSCodeInclude.h"

#include "dInclude.h"

task main()
{
	// Changed 450 |
	clearDebugStream();
	bool lastCornerVal[4];
	ClearTimer(T1);
	StartTask(Ard);
	StartTask(Sensor);
	delay(500); //let sensor init
	while (true)
	{
		Light[left] = SensorValue(ll);
		//Light[mid] = LSvalRaw(port1);
		Light[right] = SensorValue(rr);
		if ((Light[left] < CalLeft) && (Light[mid] > CalMid) /*(Light[mid] < CalMid)*/ && (Light[right] > CalRight)) //Links
		{
			//writeDebugStream("Left:\t");
			nxtDisplayCenteredBigTextLine(1, "Left");
			//while((Light[left] < CalLeft)) {Light[left] = SensorValue(ll); writeDebugStreamLine("In While"); }
			lastCornerVal[0] = (Light[left] < CalLeft);
			lastCornerVal[1] = (Light[mid] > CalMid) /*(Light[mid] < CalMid)*/;
			lastCornerVal[2] = (Light[right] < CalRight);
			//ClearTimer(T1);
			delay(25);
			FastLeft();
			delay(100);
		}
		Light[left] = SensorValue(ll);
		//Light[mid] = LSvalRaw(port1);
		Light[right] = SensorValue(rr);
		if ((Light[mid] > CalMid) /*(Light[mid] < CalMid)*/) //Geradeaus
		{
			//writeDebugStream("Straight:\t");
			nxtDisplayCenteredBigTextLine(1, "Straight");
			Drive();
			delay(30);
		}
		Light[left] = SensorValue(ll);
		//Light[mid] = LSvalRaw(port1);
		Light[right] = SensorValue(rr);
		if ((Light[left] > CalLeft) && (Light[mid] > CalMid) /*(Light[mid] < CalMid)*/ && (Light[right] < CalRight)) //Rechts
		{
			//writeDebugStream("Right:\t");
			nxtDisplayCenteredBigTextLine(1, "Right");
			//while((Light[right] < CalRight)) {Light[right] = SensorValue(rr); writeDebugStreamLine("In While"); }
			lastCornerVal[0] = (Light[left] < CalLeft);
			lastCornerVal[1] = (Light[mid] > CalMid) /*(Light[mid] < CalMid)*/;
			lastCornerVal[2] = (Light[right] < CalRight);
			//ClearTimer(T1);
			delay(25);
			FastRight();
			delay(100);
		}
		Light[left] = SensorValue(ll);
		//Light[mid] = LSvalRaw(port1);
		Light[right] = SensorValue(rr);
		if ((Light[mid] > CalMid) /*(Light[mid] < CalMid)*/) //Geradeaus
		{
			//writeDebugStream("Straight:\t");
			nxtDisplayCenteredBigTextLine(1, "Straight");
			Drive();
			delay(30);
		}

		if (Green[left] == ARDUINO_GREEN && Green[right] != ARDUINO_GREEN)
		{
			move(-drive, -drive, 40);
			move(0, 0);
			delay(100);
			if (Green[left] == ARDUINO_WHITE)
			{
				arduinoBeep = true;
				move(drive, drive, 330);
				move(-drive, drive, 300);
				//move(-drive, drive);
				FastLeft();
				while (Light[mid] < CalMid)
				{
					//Light[mid] = LSvalRaw(port1);
				}
				move(drive, drive);
			}
			else
			{
				move(drive, drive, 225);
				move(drive, drive);
			}

		}
		if (Green[left] != ARDUINO_GREEN && Green[right] == ARDUINO_GREEN)
		{
			move(-drive, -drive, 40);
			move(0, 0);
			delay(100);
			if (Green[right] == ARDUINO_WHITE)
			{
				arduinoBeep = true;
				move(drive, drive, 330);
				move(drive, -drive, 300);
				//move(drive, -drive);
				FastRight();
				while (Light[mid] < CalMid)
				{
					//Light[mid] = LSvalRaw(port1);
				}
				move(drive, drive);
			}
			else
			{
				move(drive, drive, 225);
				move(drive, drive);
			}
		}
		if (Green[left] == ARDUINO_GREEN && Green[right] == ARDUINO_GREEN)
		{
			
		}


		if (vArDVal[3] == ARDUINO_LOW) //Taster
		{
			move(-drive, -drive, 100); // Back
			move(drive, -drive, 220);  // Right
			move(drive, drive, 100);   // Forward
			move(obs_l, obs_r);		   // Left
			//Light[mid] = LSvalRaw(port1);
			nxtDisplayCenteredTextLine(7, "Before While");
			while (Light[mid] < CalMid)
			{
				//Light[mid] = LSvalRaw(port1);
			}
			nxtDisplayCenteredTextLine(7, "After While");
			move(drive, drive, 200);
			move(drive, -drive);
			//Light[mid] = LSvalRaw(port1);
			while (Light[mid] < CalMid)
			{
				//Light[mid] = LSvalRaw(port1);
			}
			nxtDisplayCenteredTextLine(7, "  ");
		}

		nxtDisplayCenteredTextLine(3, "%d|%d|%d", lastCornerVal[0], lastCornerVal[1], lastCornerVal[2]);
		nxtDisplayCenteredTextLine(4, "%d", time1[T1]);
		//nxtDisplayCenteredBigTextLine(6, "l: %d|r: %d", leftGreen, rightGreen);
		writeDebugStreamLine("%d | %d | %d", Light[left], Light[mid], Light[right]);
	}
}
